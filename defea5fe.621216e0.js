(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{298:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return c}));var a=t(4),i=t(9),s=(t(1),t(324)),r={id:"typescript-type-graphql",title:"TypeScript TypeGraphQL"},o={unversionedId:"plugins/typescript-type-graphql",id:"plugins/typescript-type-graphql",isDocsHomePage:!1,title:"TypeScript TypeGraphQL",description:"This plugin is similar to the basic TypeScript plugin. However, this package generates types that can be used by TypeGraphQL to generate a GraphQL schema. This is especially useful if you are building a service that is a gateway to multiple downstream GraphQL services, or otherwise combining GraphQL schemas. In this case, this plugin can be used to re-expose types defined in downstream GraphQL services without redefining them as TypeGraphQL objects. This plugin should be compatible with other client-side plugins, such as typescript-operations.",source:"@site/docs/plugins/typescript-type-graphql.md",slug:"/plugins/typescript-type-graphql",permalink:"/docs/plugins/typescript-type-graphql",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-type-graphql.md",version:"current",sidebar:"sidebar",previous:{title:"Named Operations Object",permalink:"/docs/plugins/named-operations-object"},next:{title:"Typescript Apollo Nextjs",permalink:"/docs/plugins/typescript-apollo-next"}},p=[],l={rightToc:p};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This plugin is similar to the basic TypeScript plugin. However, this package generates types that can be used by TypeGraphQL to generate a GraphQL schema. This is especially useful if you are building a service that is a gateway to multiple downstream GraphQL services, or otherwise combining GraphQL schemas. In this case, this plugin can be used to re-expose types defined in downstream GraphQL services without redefining them as TypeGraphQL objects. This plugin should be compatible with other client-side plugins, such as typescript-operations."),Object(s.b)("p",null,"Some differences with the the types generated by the basic TypeScript plugin:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"classes are generated instead of interfaces"),Object(s.b)("li",{parentName:"ul"},"TypeGraphQL decorators like @ObjectType and @Field will be added")),Object(s.b)("p",null,Object(s.b)("h2",{parentName:"p"},"Installation"),Object(s.b)("img",{alt:"typescript-type-graphql plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/typescript-type-graphql?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),Object(s.b)("div",Object(a.a)({parentName:"p"},{className:"admonition admonition-shell"}),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"})),Object(s.b)("path",Object(a.a)({parentName:"svg"},{d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"})))),"Using ",Object(s.b)("inlineCode",{parentName:"h5"},"yarn"))),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("pre",{parentName:"div"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"yarn add -D @graphql-codegen/typescript-type-graphql\n")))),Object(s.b)("h2",{parentName:"p"},"API Reference"),Object(s.b)("h3",{parentName:"p"},Object(s.b)("inlineCode",{parentName:"h3"},"decoratorName")),Object(s.b)("p",{parentName:"p"},"type: ",Object(s.b)("inlineCode",{parentName:"p"},"Partial<DecoratorConfig>"),"\ndefault: ````json\n{\ntype: 'ObjectType',\ninterface: 'InterfaceType',\narguments: 'ArgsType',\nfield: 'Field',\ninput: 'InputType'\n}"),Object(s.b)("pre",{parentName:"p"},Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"\nallow overriding of TypeGraphQL decorator types\n\n\n### `decorateTypes`\n\ntype: `string[]`\n\nSpeciies the objects that will have TypeGraphQL decorators prepended to them, by name. Non-matching types will still be output, but without decorators. If not set, all types will be decorated.\n\n\n### `avoidOptionals`\n\ntype: `AvoidOptionalsConfig | boolean`\ndefault: `false`\n\nThis will cause the generator to avoid using TypeScript optionals (`?`) on types,\nso the following definition: `type A { myField: String }` will output `myField: Maybe<string>`\ninstead of `myField?: Maybe<string>`.\n\n#### Usage Examples\n\n##### Override all definition types\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   avoidOptionals: true\n```\n\n##### Override only specific definition types\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   avoidOptionals:\n     field: true\n     inputValue: true\n     object: true\n```\n\n### `constEnums`\n\ntype: `boolean`\ndefault: `false`\n\nWill prefix every generated `enum` with `const`, you can read more about const enums here: https://www.typescriptlang.org/docs/handbook/enums.html.\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   constEnums: true\n```\n\n### `enumsAsTypes`\n\ntype: `boolean`\ndefault: `false`\n\nGenerates enum as TypeScript `type` instead of `enum`. Useful it you wish to generate `.d.ts` declaration file instead of `.ts`\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsTypes: true\n```\n\n### `numericEnums`\n\ntype: `boolean`\ndefault: `false`\n\nControls whether to preserve typescript enum values as numbers\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   numericEnums: true\n```\n\n### `futureProofEnums`\n\ntype: `boolean`\ndefault: `false`\n\nThis option controls whether or not a catch-all entry is added to enum type definitions for values that may be added in the future. You also have to set `enumsAsTypes` to true if you wish to use this option.\nThis is useful if you are using `relay`.\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsTypes: true\n   futureProofEnums: true\n```\n\n### `enumsAsConst`\n\ntype: `boolean`\ndefault: `false`\n\nGenerates enum as TypeScript `const assertions` instead of `enum`. This can even be used to enable enum-like patterns in plain JavaScript code if you choose not to use TypeScript\u2019s enum construct.\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsConst: true\n```\n\n### `onlyOperationTypes`\n\ntype: `boolean`\ndefault: `false`\n\nThis will cause the generator to emit types for operations only (basically only enums and scalars).\nInteracts well with `preResolveTypes: true`\n\n#### Usage Examples\n\nOverride all definition types\n```yml\ngenerates:\npath/to/file.ts:\nplugins:\n- typescript\nconfig:\nonlyOperationTypes: true\n```\n\n### `immutableTypes`\n\ntype: `boolean`\ndefault: `false`\n\nGenerates immutable types by adding `readonly` to properties and uses `ReadonlyArray`.\n\n#### Usage Examples\n\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   immutableTypes: true\n```\n\n### `maybeValue`\n\ntype: `string`\ndefault: `T | null`\n\nAllow to override the type value of `Maybe`.\n\n#### Usage Examples\n\n##### Allow undefined\n```yml\ngenerates:\n path/to/file.ts:\n   plugins:\n     - typescript\n   config:\n     maybeValue: T | null | undefined\n```\n\n##### Allow `null` in resolvers:\n```yml\ngenerates:\n path/to/file.ts:\n   plugins:\n     - typescript\n     - typescript-resolvers\n   config:\n     maybeValue: 'T extends PromiseLike<infer U> ? Promise<U | null> : T | null'\n```\n\n### `noExport`\n\ntype: `boolean`\ndefault: `false`\n\nSet the to `true` in order to generate output without `export` modifier.\nThis is useful if you are generating `.d.ts` file and want it to be globally available.\n\n#### Usage Examples\n\n##### Disable all export from a file\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   noExport: true\n```\n\n### `addUnderscoreToArgsType`\n\ntype: `boolean`\n\nAdds `_` to generated `Args` types in order to avoid duplicate identifiers.\n\n#### Usage Examples\n\n##### With Custom Values\n```yml\n  config:\n    addUnderscoreToArgsType: true\n```\n\n### `enumValues`\n\ntype: `EnumValuesMap`\n\nOverrides the default value of enum values declared in your GraphQL schema.\nYou can also map the entire enum to an external type by providing a string that of `module#type`.\n\n#### Usage Examples\n\n##### With Custom Values\n```yml\n  config:\n    enumValues:\n      MyEnum:\n        A: 'foo'\n```\n\n##### With External Enum\n```yml\n  config:\n    enumValues:\n      MyEnum: ./my-file#MyCustomEnum\n```\n\n##### Import All Enums from a file\n```yml\n  config:\n    enumValues: ./my-file\n```\n\n### `declarationKind`\n\ntype: `DeclarationKindConfig | string (values: abstract class, class, interface, type)`\n\nOverrides the default output for various GraphQL elements.\n\n#### Usage Examples\n\n##### Override all declarations\n```yml\n  config:\n    declarationKind: 'interface'\n```\n\n##### Override only specific declarations\n```yml\n  config:\n    declarationKind:\n      type: 'interface'\n      input: 'interface'\n```\n\n### `enumPrefix`\n\ntype: `boolean`\ndefault: `true`\n\nAllow you to disable prefixing for generated enums, works in combination with `typesPrefix`.\n\n#### Usage Examples\n\n##### Disable enum prefixes\n```yml\n  config:\n    typesPrefix: I\n    enumPrefix: false\n```\n\n### `fieldWrapperValue`\n\ntype: `string`\ndefault: `T`\n\nAllow you to add wrapper for field type, use T as the generic value. Make sure to set `wrapFieldDefinitions` to `true` in order to make this flag work.\n\n#### Usage Examples\n\n##### Allow Promise\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   wrapFieldDefinitions: true\n   fieldWrapperValue: T | Promise<T>\n```\n\n### `wrapFieldDefinitions`\n\ntype: `boolean`\ndefault: `false`\n\nSet the to `true` in order to wrap field definitions with `FieldWrapper`.\nThis is useful to allow return types such as Promises and functions.\n\n#### Usage Examples\n\n##### Enable wrapping fields\n```yml\ngenerates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   wrapFieldDefinitions: true\n```\n\n### `scalars`\n\ntype: `ScalarsMap`\n\nExtends or overrides the built-in scalars and custom GraphQL scalars to a custom type.\n\n#### Usage Examples\n\n```yml\nconfig:\n  scalars:\n    DateTime: Date\n    JSON: \"{ [key: string]: any }\"\n```\n\n### `namingConvention`\n\ntype: `NamingConvention`\ndefault: `pascal-case#pascalCase`\n\nAllow you to override the naming convention of the output.\nYou can either override all namings, or specify an object with specific custom naming convention per output.\nThe format of the converter must be a valid `module#method`.\nAllowed values for specific output are: `typeNames`, `enumValues`.\nYou can also use \"keep\" to keep all GraphQL names as-is.\nAdditionally you can set `transformUnderscore` to `true` if you want to override the default behavior,\nwhich is to preserves underscores.\n\n#### Usage Examples\n\n##### Override All Names\n```yml\nconfig:\n  namingConvention: lower-case#lowerCase\n```\n\n##### Upper-case enum values\n```yml\nconfig:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    enumValues: upper-case#upperCase\n```\n\n##### Keep names as is\n```yml\nconfig:\n  namingConvention: keep\n```\n\n##### Remove Underscores\n```yml\nconfig:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    transformUnderscore: true\n```\n\n### `typesPrefix`\n\ntype: `string`\ndefault: ``\n\nPrefixes all the generated types.\n\n#### Usage Examples\n\n```yml\nconfig:\n  typesPrefix: I\n```\n\n### `typesSuffix`\n\ntype: `string`\ndefault: ``\n\nSuffixes all the generated types.\n\n#### Usage Examples\n\n```yml\nconfig:\n  typesSuffix: I\n```\n\n### `skipTypename`\n\ntype: `boolean`\ndefault: `false`\n\nDoes not add __typename to the generated types, unless it was specified in the selection set.\n\n#### Usage Examples\n\n```yml\nconfig:\n  skipTypename: true\n```\n\n### `nonOptionalTypename`\n\ntype: `boolean`\ndefault: `false`\n\nAutomatically adds `__typename` field to the generated types, even when they are not specified\nin the selection set, and makes it non-optional\n\n#### Usage Examples\n\n```yml\nconfig:\n  nonOptionalTypename: true\n```\n\n### `useTypeImports`\n\ntype: `boolean`\ndefault: `false`\n\nWill use `import type {}` rather than `import {}` when importing only types. This gives\ncompatibility with TypeScript's \"importsNotUsedAsValues\": \"error\" option\n\n"))))}c.isMDXComponent=!0},324:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var a=t(1),i=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),c=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},y=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),y=a,d=u["".concat(r,".").concat(y)]||u[y]||m[y]||s;return t?i.a.createElement(d,o(o({ref:n},l),{},{components:t})):i.a.createElement(d,o({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var l=2;l<s;l++)r[l]=t[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}y.displayName="MDXCreateElement"}}]);